<% layout('layouts/boilerplate') %>

    <div class="row w-100">
        <div class="col-6 d-flex flex-column gap-2 offset-1">
            <div class="card" style="min-height: 250px;">
                <div class="card-body">
                    <h5 class="card-title text-black">MY SENSORS</h5>
                    <div class="container d-flex gap-2 sensors-container">
                        <% for(const [index, s] of sensors.entries()){ %>
                        <% const backgroundColor=(index % 2)==0 ? 'green-background' : 'purple-background' ; %>
                                <div class="card <%= backgroundColor%> text-white">
                                    <div class="card-body">
                                        <h5 class="card-title fs-4">
                                            <%= s.sensor_name %>
                                        </h5>
                                        <p class="lead fw-bold fs-6">MAX: 136mmHg</p>
                                        <p class="lead fw-bold fs-6">MIN: 136mmHg</p>
                                        <p class="lead fw-bold fs-6">Curr: 136mmHg</p>
                                        <form action="/sensor/<%= s.sensor_id %>?_method=DELETE" method="post"
                                            id="sensorDelete" class="text-center">
                                            <button class="btn btn-md btn-danger">Delete</button>
                                        </form>
                                    </div>
                                </div>
                        <% } %>
                    </div>
                </div>
            </div>
            
            <div class="card">                    
                <div class="card-body" >
                    <div class="container-fluid">
                        <form action="/medicalHistory/" method="post" class="d-none d-flex flex-column" id="medicalHistoryForm" style="min-height: 320px;">
                            <div class="mb-3">
                                <select  class="form-select w-50" name="treatment" id="treatmentType">
                                    <option selected disabled>Select Treatment</option>
                                    <option value="prescription">Prescription</option>
                                    <option value="scanner">Scanner</option>
                                </select>
                            </div>
                            <button class="btn green-background text-white fw-bold d-none mt-3 mx-auto" id="submitMedicalHistoryForm">Add Medical History</button>
                        </form>
                    </div>
                    <div class="container-fluid d-flex gap-3" id="medicalHistoryBox">
                        <button class="lead fw-bold fs-6 my-auto border-0 bg-transparent treatment-type">Prescription</button>
                        <div class="vr"></div>
                        <button class="lead fw-bold fs-6 my-auto border-0 bg-transparent treatment-type">Scanner</button>
                        <div class="vr"></div>
                        <button class="lead fw-bold fs-6 my-auto border-0 bg-transparent treatment-type">Analyse</button>
                        <div class="vr"></div>
                        <button class="lead fw-bold fs-6 my-auto border-0 bg-transparent treatment-type">Radio</button>
                    </div>
                    <div class="container-fluid mt-4"  id="treatments-box">
                        <div class="row" id="medicalHistoryRow">
                            <div class="col-5">
                                <div class="vstack gap-3">
                                    <div class="card" style="min-height: 250px;">
                                        <div class="card-body medical-history-height d-flex flex-column gap-2" id="treatments">
                                            
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 w-auto" id="search-result"></div>
                        </div>
                    </div>
                    <div class="div d-flex justify-content-end align-content-end">
                        <a class="" id="addMedicalHistory"><img src="/pics/add_medical_history.svg" style="height: 40px;"></a>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-3 d-flex flex-column">
            <div class="card mb-5" id="riskCard">
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Cardiovascular Risk</li>
                        <li class="list-group-item d-flex flex-column"> <span
                                class="btn grey-background text-white fw-bold" id="riskFactorButton"> Risk Factors: <%=
                                    Evaluation.counter %></span>
                            <div id="riskFactors" class="d-none vstack gap-3"
                                style="max-height: 80px; overflow-x: hidden; overflow-y: scroll;">
                                <% for(const factor in Evaluation.factors) { %>
                                    <div class="p-2">
                                        <%= factor %>: <%= Evaluation.factors[factor] %>
                                    </div>
                                <% } %>
                            </div>
                        </li>
                        <li class="list-group-item">Risk Class: <%= Evaluation.riskClass %>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="mt-5 w-100" id="chatBox">
                <div class="card text-center position-relative">
                    <h4 class="me-5 fw-normal card-header w-100">Chat With <%= receiver.person_name %></h4>
                    <div class="card-body d-block" id="chatBoxBody">
                        <div class="card-text max-chat-height" id="chatDiv">

                        </div>
                        <div class="d-flex d-block" id="messageFactory">
                            <input id="chatInput" type="text" placeholder="Send a message" class="form-control">
                            <button class="btn btn-primary ms-2 sendBTN" id="sendMessage">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script>
        const socket = new WebSocket('ws://localhost:9090/room');

        const chatInput = document.querySelector('#chatInput');
        const chatHeader = document.querySelector('#chatBoxHeader');
        const chatBody = document.querySelector('#chatBoxBody');
        const messageFactory = document.querySelector('#messageFactory');
        const startChatBtns = document.querySelectorAll('.startChat');
        const sendBTN = document.querySelector('.sendBTN');
        const profileCards = document.querySelectorAll('.profileCards');
        const chatBox = document.querySelector('#chatBox');
        const chatSend = document.querySelector('#sendMessage')
        const chatDiv = document.querySelector('#chatDiv');


        const sender_id = "<%= sender.person_id %>";
        const sender_name = "<%= sender.person_name%>";
        const receiver_id = "<%= receiver.person_id%>";

        let role = null;
        const test = "<%= sender %>";

        if ("<%= sender.doctor_speciality%>") {
            role = "doctor";
        } else {
            role = "patient";
        }

        // Establish a socket between all doctors of this patient
        socket.addEventListener('open', (event) => {
            console.log('WebSocket connection opened');
            const message = {
                type: "login",
                sender_id: sender_id,
                receiver_id: receiver_id,
                role: role
            }
            socket.send(JSON.stringify(message));

        });
        // Send a message to specific patient
        let activeTab1 = null;
        chatSend.addEventListener('click', () => {
            const content = chatInput.value;
            const message = {
                type: "message",
                sender_id: sender_id,
                sender_name: sender_name,
                receiver_id: receiver_id,
                role: role,
                content
            }
            if (chatInput.value !== '') {
                const html = `<p class="lead text-start">You: ${chatInput.value}</p>`;
                chatDiv.innerHTML += html;
                socket.send(JSON.stringify(message));
            }
            chatInput.value = '';
        })

        // Receives A message from Certain patient
        socket.addEventListener('message', async (event) => {

            const data = JSON.parse(event.data);
            console.log("HERE WITH DATA" + data.content);
            const html = `<p class="lead">${data.sender_name}: ${data.content}</p>`;
            chatDiv.innerHTML += html;
            // sendBTN.addEventListener('click', () => {
            //     const message = {
            //         type: "message",
            //         sender_id: doctor_id,
            //         sender_name: sender_name,
            //         receiver_id: receiver_id,
            //         role: role,
            //         content: chatInput.value
            //     }
            //     if (chatInput.value !== '') {
            //         const html = `<p class="lead">You: ${chatInput.value}</p>`;
            //         chatDiv.innerHTML += html;
            //         socket.send(JSON.stringify(message));
            //         chatInput.value = '';
            //     }
            // })

        }
        );


// End
// socket.addEventListener('close', (event) => {
//     console.log('WebSocket connection closed');
// });

    </script>

    <script>
        const searchTreatment = document.querySelectorAll('.search-treatment');
        const searchResult = document.getElementById('search-result');
        let activeTab = '';
        searchTreatment.forEach(e => {
            e.addEventListener('click', async (ele) => {
                if (!(activeTab === '')) {
                    activeTab.classList.remove('btn-success');
                }
                activeTab = ele.target;
                ele.target.classList.add('btn-success');
                const link = ele.target.getAttribute('href');
                const result = await fetch(link);
                const result1 = await result.text();
                searchResult.innerHTML = result1;
            })
        })

    </script>
    <script>
        const addMedicalHistoryButton = document.querySelector('#addMedicalHistory');
        const medicalHistoryForm = document.querySelector('#medicalHistoryForm');
        const medicalHistoryRow = document.querySelector('#medicalHistoryRow');
        const medicalHistoryBox = document.querySelector('#medicalHistoryBox'); 

        addMedicalHistoryButton.addEventListener('click', () => {
            addMedicalHistoryButton.classList.add('d-none');
            medicalHistoryBox.classList.add('d-none');
            medicalHistoryRow.classList.add('d-none');
            medicalHistoryForm.classList.remove('d-none');
        })
    </script>
    <script>
        function createPrescription() {
            const div = document.createElement('div');
            div.classList.add('d-flex', 'flex-column', 'gap-2');
            const diagnosisInput = document.createElement('input');
            diagnosisInput.classList.add('form-control');
            diagnosisInput.setAttribute('type', 'text');
            diagnosisInput.setAttribute('name', `diagnosis`);
            diagnosisInput.setAttribute('placeholder', 'Diagnosis');
            const notesInput = document.createElement('input');
            notesInput.classList.add('form-control');
            notesInput.setAttribute('type', 'text');
            notesInput.setAttribute('name', `notes`);
            notesInput.setAttribute('placeholder', 'notes');
            const dateInput = document.createElement('input');
            dateInput.classList.add('form-control');
            dateInput.setAttribute('type', 'datetime-local');
            dateInput.setAttribute('name', `date`);
            const medicationInput = document.createElement('input');
            medicationInput.classList.add('form-control');
            medicationInput.setAttribute('type', 'text');
            medicationInput.setAttribute('name', `medicine`);
            medicationInput.setAttribute('placeholder', 'Medication name');
            const dosageInput = document.createElement('input');
            dosageInput.classList.add('form-control');
            dosageInput.setAttribute('type', 'text');
            dosageInput.setAttribute('name', `dosage`);
            dosageInput.setAttribute('placeholder', 'Medication dosage');
            div.appendChild(diagnosisInput);
            div.appendChild(notesInput);
            div.appendChild(dateInput);
            div.appendChild(medicationInput);
            div.appendChild(dosageInput);
            return div;
        }
        function createScanner() {
            const div = document.createElement('div');
            div.classList.add('d-flex', 'flex-column', 'gap-2');
            const diagnosisInput = document.createElement('input');
            diagnosisInput.classList.add('form-control');
            diagnosisInput.setAttribute('type', 'text');
            diagnosisInput.setAttribute('name', `diagnosis`);
            diagnosisInput.setAttribute('placeholder', 'Diagnosis');
            const notesInput = document.createElement('input');
            notesInput.classList.add('form-control');
            notesInput.setAttribute('type', 'text');
            notesInput.setAttribute('name', `notes`);
            notesInput.setAttribute('placeholder', 'notes');
            const dateInput = document.createElement('input');
            dateInput.classList.add('form-control');
            dateInput.setAttribute('type', 'date');
            dateInput.setAttribute('name', `date`);
            const scannerInput = document.createElement('input');
            scannerInput.classList.add('form-control');
            scannerInput.setAttribute('type', 'file');
            scannerInput.setAttribute('name', `photos`);
            div.appendChild(diagnosisInput);
            div.appendChild(notesInput);
            div.appendChild(dateInput);
            div.appendChild(scannerInput);
            return div;
        }

    </script>

    <script>
        const treatmentType = document.querySelector('#treatmentType');
        const submitMedicalHistoryForm = document.querySelector('#submitMedicalHistoryForm');

        treatmentType.addEventListener('change', () => {
            treatmentType.classList.add('d-none');
            submitMedicalHistoryForm.classList.remove('d-none');
            let element = null;
            if (treatmentType.value == 'prescription') {
                element = createPrescription();
            } else if (treatmentType.value == 'scanner') {
                element = createScanner();
                medicalHistoryForm.setAttribute('enctype', 'multipart/form-data');
            }
            medicalHistoryForm.insertBefore(element, submitMedicalHistoryForm);
        })
    </script>
    <script>
        const riskFactorButton = document.querySelector('#riskFactorButton');
        const riskFactors = document.querySelector('#riskFactors');
        const riskCard= document.querySelector('#riskCard');
        riskFactorButton.addEventListener('click', () => {
            if(riskFactors.classList.contains('d-none')) {
                chatBox.classList.remove('mt-5');
                chatBox.classList.add('mt-3');
                riskCard.classList.remove('mb-5');
                riskFactors
                riskFactors.classList.remove('d-none');
                riskFactors.classList.add('d-block');
                riskFactorButton.classList.remove('grey-background');
                riskFactorButton.classList.add('green-background');
            }else {
                chatBox.classList.remove('mt-3');
                chatBox.classList.add('mt-5');
                riskCard.classList.add('mb-5');
                riskFactors.classList.remove('d-block');
                riskFactors.classList.add('d-none');
                riskFactorButton.classList.remove('green-background');
                riskFactorButton.classList.add('grey-background');
            }
        })

    </script>
