<%- layout('layouts/patientBoilerplate') %>
<div class="container-fluid">
    <!-- <h1 class="display-5 text-center my-3">Welcome Back <%= patientObject.person_name %></h1> -->
        <div class="row">
            <div class="col-md-2">
                <div class="row my-3">
                    <div class="col">
                        <form id="search-form" method="get" action="" class="d-flex flex-column" role="search">
                            <input class="form-control" placeholder="Search" name="q" id="search-input"
                                autocomplete="off">
                            <div id="search-results" class="vstack gap-3 mt-2"></div>
                        </form>
                    </div>
                </div>
                <div class="max-profiles-height d-flex flex-column">
                    <% for(const p of doctors){ %>
                        <div class="my-2 profileCards" style="max-width: 300px;">
                            <div class="card text-bg-light">
                                <div class="card-body p-2">
                                    <h5 class="text-center">
                                        <%= p.person_name %>
                                    </h5>
                                </div>
                            </div>
                            <div class="d-none d-flex justify-content-center gap-1 infoCard">
                                <a href="/users/patient/doctor_full_details/<%= p.person_id %>"
                                    class="btn btn-sm btn-primary text-white fw-bold mt-2 patient-ids">Visit Profile</a>
                                <a href="#" class="btn btn-sm btn-info startChat text-white fw-bold mt-2"
                                    data-doctor-id="<%= p.person_id %>" data-doctor-name="<%= p.person_name %>">Send a
                                    message</a>
                                </div>
                                
                            </div>
                        <% } %>
                    </div>
            </div>
            <div class="col-md-7 mt-4 d-flex flex-column gap-4">
                <div class="row offset-1 mb-2">
                    <div class="card col-5 p-0 me-1 sensor-appointment-height">
                        <h5 class="card-header sticky-top">My Sensors</h5>
                        <!-- give max height to sensor card -->
                        <div class="card-body vstack gap-2 overflow-scroll overflow-x-hidden">
                            <% for(const s of sensors){ %>
                                <div class="p-2 text-center">
                                    <h4 class="fs-5 d-inline">
                                        <%= s.sensor_name %>:
                                    </h4>
                                    <span class=" fs-5 text-info">
                                        <%= s.recorded_data_value %>
                                        <%= s.recorded_data_unit %>
                                    </span>
                                    <div class="d-flex justify-content-around">
                                        <form action="/sensor/<%= s.sensor_id %>?_method=PUT" method="POST"
                                            class="d-none" id="sensorUpdate">
                                            <div class="mb-3">
                                                <input type="text" class="form-control" id="name" name="name"
                                                placeholder="Enter New Name">
                                                <button class="btn btn-info text-white">Update Name</button>
                                            </div>
                                        </form>
                                        <a class="btn btn-md btn-info text-white" id="updateSensor">Update Name</a>
                                        <form action="/sensor/<%= s.sensor_id %>?_method=DELETE" method="post"
                                            id="sensorDelete">
                                            <button class="btn btn-md btn-danger">Delete</button>
                                        </form>
                                    </div>
                                </div>
                                <% } %>
                            </div>
                            <div class="card-footer text-center">
                                <a href="#" class="btn btn-md btn-primary" id="addSensor">Add Sensor</a>
                                <form action="/sensor/<%= patientObject.person_id %>" method="post" id="sensorAdd"
                                    class="d-none">
                                    <input type="text" class="form-control" placeholder="Sensor Name" name="name">
                                    <input type="text" class="form-control" placeholder="Sensor Model" name="model">
                                    <button class="btn btn-success">Add Sensor</button>
                                </form>
                            </div>
                        </div>
                        <div class="ms-1 card col-5 p-0 sensor-appointment-height">
                            <h5 class="card-header sticky-top">My Appointments</h5>
                            <!-- give max height to sensor card -->
                            <div class="card-body vstack gap-2 overflow-scroll overflow-x-hidden">
                                <% for(const a of appointments){ %>
                                    <% const options ={weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric'} %>
                                    <% const date = new Date(a.appointment_date).toLocaleDateString(undefined, options); %> 
                                    <% const formDate = date.slice(9) %>    
                                    <% const test_date = new Date(a.appointment_date); %> 
                                    <% const display_date = test_date.toLocaleString('en-US', options); %>
                                    <% const year = test_date.getFullYear() %>
                                    <% let month = test_date.getMonth() + 1; %>
                                    <% if(month<10) month = `0${month}`;%> 
                                    <% let day_e = test_date.getDate(); %>
                                    <% if(day_e<10) day_e = `0${day_e}`;%>
                                    <% let hrs = (test_date.getHours() %12)%>
                                    <% if(hrs<10) hrs = `0${hrs}`;%>
                                    <% let mns= test_date.getMinutes()%>
                                    <% if(mns<10) mns = `0${mns}`;%>
                                    <% const tmp = `${year}-${month}-${day_e}T${hrs}:${mns}`; %>
                                    <div class="p-2 text-center bg-light">
                                        <div class="appointmentBody" data-appointment="<%= a.appointment_id %>">
                                            <h4 class="fs-5 d-inline">
                                                <%= a.person_name %>
                                            </h4>
                                            <p class="lead fs-6 text-info">
                                                <span>
                                                    <%= display_date%>
                                                </span>
                                                <span class="text-black fs-6">
                                                    <%= (a.appointment_type).toLowerCase() %>
                                                </span>
                                            </p>
                                        </div>
                                        <div class="d-flex justify-content-around">
                                            <form action="/appointment/<%= a.appointment_id %>?_method=PUT" method="POST"
                                                class="d-none" id="appointmentUpdate">
                                                <div class="mb-3">
                                                    <input type="datetime-local" class="form-control" id="name" name="date"
                                                        placeholder="Enter New Date" value="<%= tmp %>">
                                                    <button class="btn btn-info text-white">Update Date</button>
                                                </div>
                                            </form>
                                            <a class="btn btn-md btn-info text-white updateAppointmentButton" data-appointment="<%= a.appointment_id %>">Change Date</a>
                                            <form action="/appointment/<%= a.appointment_id %>?_method=DELETE" method="post"
                                                id="appointmentDelete">
                                                <button class="btn btn-md btn-danger">Delete</button>
                                            </form>
                                        </div>
                                    </div>
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="card p-0">
                        <h5 class="card-header sticky-top">My Medical History</h5>
                        <div class="card-body">
                            <div class="row" id="medicalHistoryRow">
                                <div class="col-6">
                                    <div class="vstack gap-3">
                                        <div class="card">
                                            <div class="card-body medical-history-height">
                                                <% for(const m of medical_history){ %>
                                                    <div class="p-2 d-flex">
                                                        <div
                                                            class="hstack gap-3 d-flex align-items-end justify-content-between flex-grow-1">
                                                            <label class="form-label">
                                                                <%= m.medical_history_diagnosis %>
                                                            </label>
                                                            <a class="btn btn-secondary search-treatment"
                                                                href="/treatment/search/<%= m.treatment_id %>"
                                                                onclick="return false;">Open Treatment</a>
                                                        </div>
                                                    </div>
                                                    <% } %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-4" id="search-result"></div>
                            </div>
                            <div class="row">
                                <div class="col-6">
                                    <form action="/medicalHistory/?patient_id=<%= patientObject.person_id%>"
                                        method="post" class="d-none" id="medicalHistoryForm">
                                        <div class="mb-3">
                                            <label for="diagnosis" class="form-label">Diagnosis: </label>
                                            <input id="diagnosis" type="text" class="form-control" name="diagnosis">
                                        </div>
                                        <div class="mb-3">
                                            <label for="notes" class="form-label">Notes: </label>
                                            <input id="notes" type="text" class="form-control" name="notes">
                                        </div>
                                        <div class="mb-3">
                                            <label for="date" class="form-label">Date: </label>
                                            <input id="date" type="date" class="form-control" name="date">
                                        </div>
                                        <div class="mb-3">
                                            <label for="medicine" class="form-label">Medicine: </label>
                                            <input id="medicine" type="text" class="form-control" name="medicine">
                                        </div>
                                        <div class="mb-3">
                                            <label for="dosage" class="form-label">Dosage: </label>
                                            <input type="text" class="form-control" name="dosage">
                                        </div>
                                        <button class="btn btn-primary">Add Medical History</button>
                                    </form>
                                </div>
                            </div>

                        </div>
                        <div class="card-footer">
                            <a href="#" class="btn btn-primary" id="addMedicalHistory">Add Medical History</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 d-flex flex-column justify-content-between mt-4">
                <div class="row">
                    <div class="card col-10 offset-1">
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">Cardiovascular Risk</li>
                                <li class="list-group-item">Risk Factors: <%= Evaluation.riskFactors %></li>
                                <li class="list-group-item">Risk Class: <%= Evaluation.riskClass %></li>
                              </ul>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="ms-auto align-self-end flex-shrink d-none" id="chatBox">
                        <div class="card text-center position-relative">
                            <h4 class="me-5 fw-normal">Chat With doctors</h4>
                            <div class="position-absolute top-0 end-0 d-flex gap-2 p-1">
                                <button class="btn btn-sm ms-5 symbol d-block" id="minimizeButton">&#8722;</button>
                                <button class="btn btn-sm ms-5 symbol d-none" id="boxButton">&#9633;</button>
                                <button class="btn btn-sm symbol" id="closeButton">&#10005;</button>
                            </div>
                            <div class="card-header d-flex gap-1" id="chatBoxHeader">
        
                            </div>
                            <div class="card-body d-block" id="chatBoxBody">
                                <div class="card-text max-chat-height" id="chatDiv">
        
                                </div>
                                <div class="d-flex d-block" id="messageFactory">
                                    <input id="chatInput" type="text" placeholder="Send a message" class="form-control">
                                    <button id="chatSend" class="btn btn-primary ms-2 sendBTN">Send</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
        </div>
    </div>

    <script>
        const searchTreatment = document.querySelectorAll('.search-treatment');
        const searchResult = document.getElementById('search-result');
        let activeTab = '';
        searchTreatment.forEach(e => {
            e.addEventListener('click', async (ele) => {
                if (!(activeTab === '')) {
                    activeTab.classList.remove('btn-success');
                }
                activeTab = ele.target;
                ele.target.classList.add('btn-success');
                const link = ele.target.attributes[1].value;
                const result = await fetch(link);
                const result1 = await result.text();
                searchResult.innerHTML = result1;
            })
        })

    </script>
    <script>
        const searchForm = document.getElementById('search-form');
        const searchInput = document.getElementById('search-input');
        const searchResults = document.getElementById('search-results');

        searchInput.addEventListener('input', async () => {
            const query = searchInput.value;
            const patient_id = "<%= patientObject.person_id %>"
            if (query.length === 0) {
                searchResults.innerHTML = '';
            }
            else {
                const result = await fetch(`/users/patient/search/doctor?person_name=${query}&patient_id=${patient_id}`);
                const result2 = await result.text();
                console.log(result2);
                searchResults.innerHTML = result2;
            }
        })
    </script>
    <script>
        const socket = new WebSocket('ws://localhost:8080/chat');

        const chatInput = document.querySelector('#chatInput');
        const doctors = document.querySelectorAll('.doctorID');
        const chatHeader = document.querySelector('#chatBoxHeader');
        const chatBody = document.querySelector('#chatBoxBody');
        const messageFactory = document.querySelector('#messageFactory');
        const startChatBtns = document.querySelectorAll('.startChat');
        const sendBTN = document.querySelector('.sendBTN');
        const profileCards = document.querySelectorAll('.profileCards');
        const chatBox = document.querySelector('#chatBox');
        const chatDiv = document.querySelector('#chatDiv');
        const chatSend = document.querySelector('#chatSend');
        const closeButton = document.querySelector('#closeButton');
        const minimizeButton = document.querySelector('#minimizeButton');
        const boxButton = document.querySelector('#boxButton');

        const patient_id = "<%= patientObject.person_id %>";
        const patient_name = "<%= patientObject.person_name %>"

        closeButton.addEventListener('click', () => {
            chatBox.classList.remove('d-block');
            chatBox.classList.add('d-none');
        });

        minimizeButton.addEventListener('click', () => {
            chatDiv.classList.add('d-none');
            chatDiv.classList.remove('d-block');
            chatHeader.classList.add('d-none');
            minimizeButton.classList.remove('d-block');
            minimizeButton.classList.add('d-none');
            boxButton.classList.remove('d-none');
            boxButton.classList.remove('d-block');
            messageFactory.classList.add('d-none');
            messageFactory.classList.remove('d-block')
        });

        boxButton.addEventListener('click', () => {
            chatDiv.classList.add('d-block');
            chatDiv.classList.remove('d-none');
            chatHeader.classList.add('d-flex');
            chatHeader.classList.remove('d-none');
            minimizeButton.classList.add('d-block');
            minimizeButton.classList.remove('d-none');
            boxButton.classList.add('d-none');
            boxButton.classList.remove('d-block');
            messageFactory.classList.add('d-block');
            messageFactory.classList.remove('d-none')
        });

        // Start ==> Establish a socket between This patient and his doctors
        socket.addEventListener('open', (event) => {
            console.log('WebSocket connection opened');
            for (const d of doctors) {
                const message = {
                    type: "login",
                    sender_id: patient_id,
                    sender_name: patient_name,
                    role: "patient"
                }
                socket.send(JSON.stringify(message));
            }
        });
        let activeTab1 = null;

        let activeElement = null;

        profileCards.forEach((element) => {
            element.addEventListener('click', () => {
                let test = element.childNodes[3];
                if (!activeElement) {
                    activeElement = test;
                    activeElement.classList.remove('d-none');
                    activeElement.classList.add('d-block');
                } else {
                    activeElement.classList.remove('d-block');
                    activeElement.classList.add('d-none');
                    activeElement = test;
                    activeElement.classList.remove('d-none');
                    activeElement.classList.add('d-block');
                }
            })
        })

        chatHeader.addEventListener('click', async (e) => {
            const clicked = e.target;
            if (activeTab1 != e.target) {
                activeTab1.classList.remove('btn-primary');
                activeTab1.classList.add('btn-secondary');
                activeTab1 = e.target;
                activeTab1.classList.remove('btn-secondary');
                activeTab1.classList.add('btn-primary');
            }
            if (clicked.classList.contains('chatBoxTab')) {
                chatDiv.innerHTML = '';
                const result = await fetch(`/message?sender=${patient_id}&receiver=${clicked.getAttribute('data-doctor-id')}`);
                const result1 = await result.text();
                const messagesArray = JSON.parse(result1);
                for (const m of messagesArray) {
                    if (m.message_sender == patient_id) {
                        chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                    }
                    else {
                        chatDiv.innerHTML += `<p class="lead text-end">${m.message_sender}: ${m.message_content}</p>`;
                    }
                }
            }
        })

        startChatBtns.forEach((btn) => {
            btn.addEventListener('click', async () => {
                if (chatBox.classList.contains('d-none')) {
                    chatBox.classList.remove('d-none');
                    chatBox.classList.add('d-block');
                }
                chatDiv.innerHTML = '';
                const doctor_id = btn.getAttribute('data-doctor-id');
                const doctor_name = btn.getAttribute('data-doctor-name');
                const result = await fetch(`/message?sender=${patient_id}&receiver=${doctor_id}`);
                const result1 = await result.text();
                const messagesArray = JSON.parse(result1);
                for (const m of messagesArray) {
                    if (m.message_sender == patient_id) {
                        chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                    }
                    else {
                        chatDiv.innerHTML += `<p class="lead text-end">${doctor_name}: ${m.message_content}</p>`;
                    }
                }
                chatSend.addEventListener('click', () => {
                    const content = chatInput.value;
                    const message = {
                        type: "message",
                        sender_id: patient_id,
                        sender_name: patient_name,
                        receiver_id: doctor_id,
                        role: "patient",
                        content
                    }
                    if (chatInput.value !== '') {
                        const html = `<p class="lead text-start">You: ${message.content}</p>`;
                        chatDiv.innerHTML += html;
                        socket.send(JSON.stringify(message));
                    }
                    chatInput.value = '';

                })
                // create first tab 
                if (!activeTab1) {
                    chatBox.classList.remove('d-none');
                    activeTab1 = document.createElement('div');
                    activeTab1.classList.add('chatBoxTab', 'btn', 'btn-primary');
                    activeTab1.textContent = doctor_name;
                    activeTab1.setAttribute('data-doctor-name', doctor_name);
                    activeTab1.setAttribute('data-doctor-id', doctor_id);
                    chatHeader.appendChild(activeTab1);
                } else {
                    // if there are tabs 
                    // check if this doctor has a tab opened
                    let existTab = null;
                    for (let i = 0; i < chatHeader.childElementCount; i++) {
                        if (chatHeader.children[i].innerText === doctor_name) {
                            existTab = chatHeader.children[i];
                            break;
                        }
                    }
                    if (existTab) {
                        // remove the highlight from the current tab 
                        // make the new tab highlighed
                        activeTab1.classList.remove('btn-primary');
                        activeTab1.classList.add('btn-secondary');
                        activeTab1 = existTab;
                        activeTab1.classList.remove('btn-secondary');
                        activeTab1.classList.add('btn-primary');
                    } else {
                        // if tab doesnt exist
                        const newTab = document.createElement('div');
                        newTab.classList.add('chatBoxTab', 'btn', 'btn-primary');
                        newTab.textContent = doctor_name;
                        newTab.setAttribute('data-doctor-name', doctor_name);
                        newTab.setAttribute('data-doctor-id', doctor_id)
                        chatHeader.appendChild(newTab);

                        //Hightlight the new tab
                        activeTab1.classList.remove('btn-primary');
                        activeTab1.classList.add('btn-secondary');
                        activeTab1 = newTab;
                        activeTab1.classList.add('btn-primary');
                    }
                }
            })

        })
        // Receives A message from Certain Doctor
        socket.addEventListener('message', async (event) => {
            if (chatBox.classList.contains('d-none')) {
                chatBox.classList.remove('d-none');
                chatBox.classList.add('d-block');
            }
            chatDiv.innerHTML = '';
            const data = JSON.parse(event.data);
            const doctor_id = data.sender_id;
            const result = await fetch(`/message?sender=${data.sender_id}&receiver=${data.receiver_id}`);
            const result1 = await result.text();
            const messagesArray = JSON.parse(result1);

            for (const m of messagesArray) {
                if (!(m.message_sender == patient_id)) {
                    chatDiv.innerHTML += `<p class="lead text-end">${data.sender_name}: ${m.message_content}</p>`;
                } else {
                    chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                }
            }

            chatSend.addEventListener('click', () => {
                const message = {
                    type: "message",
                    sender_id: patient_id,
                    sender_name: patient_name,
                    receiver_id: data.sender_id,
                    role: "patient",
                    content: chatInput.value
                }
                if (chatInput.value !== '') {
                    const html = `<p class="lead text-start">You: ${chatInput.value}</p>`;
                    chatDiv.innerHTML += html;
                    socket.send(JSON.stringify(message));
                    chatInput.value = '';
                }

            })
            if (!activeTab1) {
                activeTab1 = document.createElement('div');
                activeTab1.classList.add('chatBoxTab', 'btn', 'btn-primary');
                activeTab1.textContent = data.sender_name;
                activeTab1.setAttribute('data-doctor-id', data.sender_id);
                activeTab1.setAttribute('data-doctor-name', data.sender_name);
                chatHeader.appendChild(activeTab1);
            } else {
                // if there are tabs 
                // check if this patient has a tab opened
                let existTab = null;
                for (let i = 0; i < chatHeader.childElementCount; i++) {
                    if (chatHeader.children[i].innerText === data.sender_name) {
                        existTab = chatHeader.children[i];
                        break;
                    }
                }
                if (existTab) {
                    // remove the highlight from the current tab 
                    // make the new tab highlighed
                    activeTab1.classList.remove('btn-primary');
                    activeTab1.classList.add('btn-secondary');
                    activeTab1 = existTab;
                    activeTab1.classList.remove('btn-secondary');
                    activeTab1.classList.add('btn-primary');
                } else {
                    // if tab doesnt exist
                    const newTab = document.createElement('div');
                    newTab.classList.add('chatBoxTab', 'btn', 'btn-primary');
                    newTab.textContent = data.sender_name;
                    newTab.setAttribute('data-doctor-id', doctor_id)
                    newTab.setAttribute('data-doctor-name', data.sender_name)
                    chatHeader.appendChild(newTab);

                    //Hightlight the new tab
                    activeTab1.classList.remove('btn-primary');
                    activeTab1.classList.add('btn-secondary');
                    activeTab1 = newTab;
                    activeTab1.classList.add('btn-primary');
                }

            }
        }
        );
        // End
        // socket.addEventListener('close', (event) => {
        //     console.log('WebSocket connection closed');
        // });

    </script>
    <script>
        const updateSensorButton = document.querySelector('#updateSensor');
        const addSensorButton = document.querySelector('#addSensor');
        const updateSensorForm = document.querySelector('#sensorUpdate');
        const deleteSensorForm = document.querySelector('#sensorDelete');
        const addSensorForm = document.querySelector('#sensorAdd');
        if (updateSensorButton) {
            updateSensorButton.addEventListener('click', () => {
                updateSensorButton.classList.add('d-none');
                updateSensorForm.classList.remove('d-none');
                deleteSensorForm.classList.add('d-none');
            });
        }
        addSensorButton.addEventListener('click', () => {
            addSensorButton.classList.add('d-none');
            addSensorForm.classList.remove('d-none');
        })
    </script>
    <script>
        const updateAppointmentButton = document.querySelectorAll('.updateAppointmentButton');
        const appointmentUpdateForm = document.querySelector('#appointmentUpdate');
        const appointmentDeleteForm = document.querySelector('#appointmentDelete');
        const appointmentBody = document.querySelectorAll('.appointmentBody');

        const appointmentBodyArray = Array.from(appointmentBody);

        updateAppointmentButton.forEach(btn => {
            btn.addEventListener('click', () => {
                const string = btn.getAttribute('data-appointment');
                const element = appointmentBodyArray.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment')) 
                element.classList.add('d-none');
                btn.classList.add('d-none');
                appointmentDeleteForm.classList.add('d-none');
                appointmentUpdateForm.classList.remove('d-none');
            })
        })
        
    </script>
    <script>
        const addMedicalHistoryButton = document.querySelector('#addMedicalHistory');
        const medicalHistoryForm = document.querySelector('#medicalHistoryForm');
        const medicalHistoryRow = document.querySelector('#medicalHistoryRow');

        addMedicalHistoryButton.addEventListener('click', () => {
            addMedicalHistoryButton.classList.add('d-none');
            medicalHistoryRow.classList.add('d-none');
            medicalHistoryForm.classList.remove('d-none');
        })
    </script>