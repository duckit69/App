<%- layout('layouts/patientBoilerplate') %>
<div class="row gap-3">
    <div class="col-2 green-background d-flex flex-column gap-3 py-4 vh-100 justify-content-start align-items-center text-center">
        <% for(const d of doctors){ %>
            <a href="#" class="btn fw-bold white-background-color position-relative profileCards" style="min-height: 2.5rem;">
                <%= d.person_name %>
                <div class="d-flex position-absolute white-background-color p-3 gap-1 here infoCard d-none"
                    style="height: 75px; right: -9rem; top: 0;">

                    <img src="/pics/profile_card.svg" onclick="navigateToUserPage(<%= d.person_id %>)" class="doctors-profiles">
                    <div class="vh"></div>
                    <img src="/pics/send_message.svg" class="startChat" data-doctor-id="<%= d.person_id %>" data-doctor-name="<%= d.person_name %>">
                </div>
            </a>
        <% } %>
    </div>            
    <div class="col-6 vh-100 d-flex flex-column gap-2 middle" id="middle-section">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title text-black">MY SENSORS</h5>
                        <div class="container d-flex gap-2 sensors-container">
                            <% for(const [index, s] of sensors.entries()){ %>
                                <% const backgroundColor = (index % 2) ==  0 ? 'green-background' : 'purple-background'; %>
                                <div class="card <%= backgroundColor%> text-white">
                                    <div class="card-body">
                                        <h5 class="card-title fs-4"><%= s.sensor_name %></h5>
                                        <p class="lead fw-bold fs-6">MAX: 136mmHg</p>
                                        <p class="lead fw-bold fs-6">MIN: 136mmHg</p>
                                        <p class="lead fw-bold fs-6">Curr: 136mmHg</p>
                                        <form action="/sensor/<%= s.sensor_id %>?_method=DELETE" method="post"
                                            id="sensorDelete" class="text-center">
                                            <button class="btn btn-md btn-danger">Delete</button>
                                        </form>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title text-black">My Appointments</h5>
                        <div class="container appointment-container d-flex gap-2">
                            <% for(const [i, a] of appointments.entries()){ %>
                                <% const options ={weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric'} %>
                                <% const date = new Date(a.appointment_date).toLocaleDateString(undefined, options); %> 
                                <% const formDate = date.slice(9) %>    
                                <% const test_date = new Date(a.appointment_date); %> 
                                <% const display_date = test_date.toLocaleString('en-US', options); %>
                                <% const year = test_date.getFullYear() %>
                                <% let month = test_date.getMonth() + 1; %>
                                <% if(month<10) month = `0${month}`;%> 
                                <% let day_e = test_date.getDate(); %>
                                <% if(day_e<10) day_e = `0${day_e}`;%>
                                <% let hrs = (test_date.getHours() %12)%>
                                <% if(hrs<10) hrs = `0${hrs}`;%>
                                <% let mns= test_date.getMinutes()%>
                                <% if(mns<10) mns = `0${mns}`;%>
                                <% const tmp = `${year}-${month}-${day_e}T${hrs}:${mns}`; %>
                                <% const orangeBackground = 'orange-background' %>
                                <% const redBackground = 'red-background' %>
                                <% const purpleBackground = 'purple-background' %>
                                <% let backgroundColor = null %>
                                <% if((i%3) == 0) {backgroundColor = redBackground} else if((i%3) == 1) {backgroundColor = purpleBackground} else {backgroundColor = orangeBackground} %>
                                <div class="card text-white <%= backgroundColor %>">
                                    <div class="card-body" data-appointment="<%= a.appointment_id %>" >
                                        <div class="appointmentBody" data-appointment="<%= a.appointment_id %>">
                                            <h5 class="card-title fs-4"><%= a.person_name %></h5>
                                            <p class="lead fw-bold fs-6"><%= display_date%></p>
                                        </div>
                                        <div class="icons-container d-flex justify-content-between">
                                            <form action="/appointment/<%= a.appointment_id %>?_method=PUT" method="POST"
                                                class="d-none appointmentUpdate" id="appointmentUpdate" data-appointment="<%= a.appointment_id%>">
                                                <div class="mb-3 d-flex flex-column align-items-center gap-2">
                                                    <input type="datetime-local" class="form-control" id="name" name="date"
                                                        placeholder="Enter New Date" value="<%= tmp %>">
                                                    <button class="bg-transparent border-0 m-auto" ><img src="/pics/update_date.svg" style="height: 40px;"></button>
                                                </div>
                                            </form>
                                            <a class="updateAppointmentButton" data-appointment="<%= a.appointment_id %>"><img src="/pics/update_date.svg" style="height: 40px;"></a>
                                            <form action="/appointment/<%= a.appointment_id %>?_method=DELETE" method="post"
                                                id="appointmentDelete" class="appointmentDelete" data-appointment="<%= a.appointment_id%>">
                                                <button class="bg-transparent border-0"><img src="/pics/delete_icons.svg" style="height: 40px;"></button>
                                            </form>
                                            <form action="/appointment/<%= a.appointment_id %>" data-appointment="<%= a.appointment_id %>" method="get" class="appointmentVisitRoom">
                                                <button class="bg-transparent border-0"><img src="/pics/visit_room.svg" style="height: 40px;"></button>
                                            </form>
                                        </div>
                                        
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="card">                    
                    <div class="card-body" >
                        <div class="container-fluid">
                            <form action="/medicalHistory/" method="post" class="d-none" id="medicalHistoryForm" style="min-height: 250px;">
                                <div class="mb-3">
                                    <select  class="form-select" name="treatment" id="treatmentType">
                                        <option selected disabled>Select Treatment</option>
                                        <option value="prescription">Prescription</option>
                                        <option value="scanner">Scanner</option>
                                    </select>
                                </div>
                                <button class="btn green-background text-white fw-bold d-none mt-3" id="submitMedicalHistoryForm">Add Medical History</button>
                            </form>
                        </div>
                        <div class="container-fluid d-flex gap-3" id="medicalHistoryBox">
                            <button class="lead fw-bold fs-6 my-auto border-0 bg-transparent treatment-type">Prescription</button>
                            <div class="vr"></div>
                            <button class="lead fw-bold fs-6 my-auto border-0 bg-transparent treatment-type">Scanner</button>
                            <div class="vr"></div>
                            <button class="lead fw-bold fs-6 my-auto border-0 bg-transparent treatment-type">Analyse</button>
                            <div class="vr"></div>
                            <button class="lead fw-bold fs-6 my-auto border-0 bg-transparent treatment-type">Radio</button>
                        </div>
                        <div class="container-fluid mt-4"  id="treatments-box">
                            <div class="row" id="medicalHistoryRow">
                                <div class="col-5">
                                    <div class="vstack gap-3">
                                        <div class="card" style="min-height: 250px;">
                                            <div class="card-body medical-history-height d-flex flex-column gap-2" id="treatments">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6 w-auto" id="search-result"></div>
                            </div>
                        </div>
                        <div class="div d-flex justify-content-end align-content-end">
                            <a class="" id="addMedicalHistory"><img src="/pics/add_medical_history.svg" style="height: 40px;"></a>
                        </div>
                    </div>
                </div>

    </div>
    <div class="col-3 d-flex flex-column justify-content-between">
                <div class="card">
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Cardiovascular Risk</li>
                            <li class="list-group-item d-flex flex-column"> <span class="btn grey-background text-white fw-bold" id="riskFactorButton"> Risk Factors: <%= Evaluation.counter %></span>
                                <div id="riskFactors" class="d-none vstack gap-3" style="max-height: 80px; overflow-x: hidden; overflow-y: scroll;">
                                <% for(const factor in Evaluation.factors) { %>
                                    <div class="p-2"><%= factor %>:     <%= Evaluation.factors[factor] %></div>    
                                <% } %>
                                </div>
                            </li>
                            <li class="list-group-item">Risk Class: <%= Evaluation.riskClass %></li>
                        </ul>
                    </div>
                </div>
                <div class="align-self-end flex-shrink d-none" id="chatBox">
                    <div class="card text-center position-relative">
                        <h4 class="me-5 fw-normal">Chat With doctors</h4>
                        <div class="position-absolute top-0 end-0 d-flex gap-2 p-1">
                            <button class="btn btn-sm ms-5 symbol d-block" id="minimizeButton">&#8722;</button>
                            <button class="btn btn-sm ms-5 symbol d-none" id="boxButton">&#9633;</button>
                            <button class="btn btn-sm symbol" id="closeButton">&#10005;</button>
                        </div>
                        <div class="card-header d-flex gap-1" id="chatBoxHeader">
    
                        </div>
                        <div class="card-body d-block" id="chatBoxBody">
                            <div class="card-text max-chat-height" id="chatDiv">
    
                            </div>
                            <div class="d-flex d-block" id="messageFactory">
                                <input id="chatInput" type="text" placeholder="Send a message" class="form-control">
                                <button id="chatSend" class="btn btn-primary ms-2 sendBTN">Send</button>
                            </div>
                        </div>
                    </div>
                </div>
    </div>
            
</div>

    <script>
        const searchTreatment = document.querySelectorAll('.search-treatment');
        const searchResult = document.getElementById('search-result');
        const treatment_box = document.querySelector('#treatments-box');

        let activeTab = '';
        searchTreatment.forEach(e => {
            e.addEventListener('click', async (ele) => {
                if (!(activeTab === '')) {
                    activeTab.classList.remove('btn-success');
                }
                activeTab = ele.target;
                ele.target.classList.add('btn-success');
                const link = ele.target.getAttribute('href');
                const result = await fetch(link);
                const result1 = await result.text();
                searchResult.innerHTML = result1;
            })
        })

    </script>
    <script>
        const searchForm = document.getElementById('search-form');
        const searchInput = document.getElementById('search-input');
        const searchResults = document.getElementById('search-results');

        searchInput.addEventListener('input', async () => {
            const query = searchInput.value;
            const patient_id = "<%= patientObject.person_id %>"
            if (query.length === 0) {
                searchResults.innerHTML = '';
            }
            else {
                const result = await fetch(`/users/patient/search/doctor?person_name=${query}&patient_id=${patient_id}`);
                const result2 = await result.text();
                console.log(result2);
                searchResults.innerHTML = result2;
            }
        })
    </script>
    <script>
        const socket = new WebSocket('ws://localhost:8080/chat');

        const chatInput = document.querySelector('#chatInput');
        const doctors = document.querySelectorAll('.doctorID');
        const chatHeader = document.querySelector('#chatBoxHeader');
        const chatBody = document.querySelector('#chatBoxBody');
        const messageFactory = document.querySelector('#messageFactory');
        const startChatBtns = document.querySelectorAll('.startChat');
        const sendBTN = document.querySelector('.sendBTN');
        const profileCards = document.querySelectorAll('.profileCards');
        const chatBox = document.querySelector('#chatBox');
        const chatDiv = document.querySelector('#chatDiv');
        const chatSend = document.querySelector('#chatSend');
        const closeButton = document.querySelector('#closeButton');
        const minimizeButton = document.querySelector('#minimizeButton');
        const boxButton = document.querySelector('#boxButton');
        const middle_section = document.querySelector('#middle-section'); 

        const patient_id = "<%= patientObject.person_id %>";
        const patient_name = "<%= patientObject.person_name %>"

        closeButton.addEventListener('click', () => {
            chatBox.classList.remove('d-block');
            chatBox.classList.add('d-none');
        });

        minimizeButton.addEventListener('click', () => {
            chatDiv.classList.add('d-none');
            chatDiv.classList.remove('d-block');
            chatHeader.classList.add('d-none');
            minimizeButton.classList.remove('d-block');
            minimizeButton.classList.add('d-none');
            boxButton.classList.remove('d-none');
            boxButton.classList.remove('d-block');
            messageFactory.classList.add('d-none');
            messageFactory.classList.remove('d-block')
        });

        boxButton.addEventListener('click', () => {
            chatDiv.classList.add('d-block');
            chatDiv.classList.remove('d-none');
            chatHeader.classList.add('d-flex');
            chatHeader.classList.remove('d-none');
            minimizeButton.classList.add('d-block');
            minimizeButton.classList.remove('d-none');
            boxButton.classList.add('d-none');
            boxButton.classList.remove('d-block');
            messageFactory.classList.add('d-block');
            messageFactory.classList.remove('d-none')
        });

        // Start ==> Establish a socket between This patient and his doctors
        socket.addEventListener('open', (event) => {
            console.log('WebSocket connection opened');
            for (const d of doctors) {
                const message = {
                    type: "login",
                    sender_id: patient_id,
                    sender_name: patient_name,
                    role: "patient"
                }
                socket.send(JSON.stringify(message));
            }
        });
        let activeTab1 = null;

        let activeElement = null;

        profileCards.forEach((element) => {
            element.addEventListener('click', () => {
                let clickedElement = element.childNodes[1];
                if (!activeElement) {
                    activeElement = clickedElement;
                    activeElement.classList.remove('d-none');
                    activeElement.classList.add('d-block');
                    middle_section.classList.add('z-1');
                } else {
                    if(activeElement == clickedElement) {
                    clickedElement.classList.remove('d-block');
                    clickedElement.classList.add('d-none');
                    activeElement = null;
                    middle_section.classList.remove('z-1');
                    } else {
                    activeElement.classList.remove('d-block');
                    activeElement.classList.add('d-none');
                    activeElement = clickedElement;
                    activeElement.classList.remove('d-none');
                    activeElement.classList.add('d-block');
                    }
                }
            })
        })

        chatHeader.addEventListener('click', async (e) => {
            const clicked = e.target;
            if (activeTab1 != e.target) {
                activeTab1.classList.remove('btn-primary');
                activeTab1.classList.add('btn-secondary');
                activeTab1 = e.target;
                activeTab1.classList.remove('btn-secondary');
                activeTab1.classList.add('btn-primary');
            }
            if (clicked.classList.contains('chatBoxTab')) {
                chatDiv.innerHTML = '';
                const result = await fetch(`/message?sender=${patient_id}&receiver=${clicked.getAttribute('data-doctor-id')}`);
                const result1 = await result.text();
                const messagesArray = JSON.parse(result1);
                for (const m of messagesArray) {
                    if (m.message_sender == patient_id) {
                        chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                    }
                    else {
                        chatDiv.innerHTML += `<p class="lead text-end">${m.message_sender}: ${m.message_content}</p>`;
                    }
                }
            }
        })

        startChatBtns.forEach((btn) => {
            btn.addEventListener('click', async () => {
                if (chatBox.classList.contains('d-none')) {
                    chatBox.classList.remove('d-none');
                    chatBox.classList.add('d-block');
                }
                chatDiv.innerHTML = '';
                const doctor_id = btn.getAttribute('data-doctor-id');
                const doctor_name = btn.getAttribute('data-doctor-name');
                const result = await fetch(`/message?sender=${patient_id}&receiver=${doctor_id}`);
                const result1 = await result.text();
                const messagesArray = JSON.parse(result1);
                for (const m of messagesArray) {
                    if (m.message_sender == patient_id) {
                        chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                    }
                    else {
                        chatDiv.innerHTML += `<p class="lead text-end">${doctor_name}: ${m.message_content}</p>`;
                    }
                }
                chatSend.addEventListener('click', () => {
                    const content = chatInput.value;
                    const message = {
                        type: "message",
                        sender_id: patient_id,
                        sender_name: patient_name,
                        receiver_id: doctor_id,
                        role: "patient",
                        content
                    }
                    if (chatInput.value !== '') {
                        const html = `<p class="lead text-start">You: ${message.content}</p>`;
                        chatDiv.innerHTML += html;
                        socket.send(JSON.stringify(message));
                    }
                    chatInput.value = '';

                })
                // create first tab 
                if (!activeTab1) {
                    chatBox.classList.remove('d-none');
                    activeTab1 = document.createElement('div');
                    activeTab1.classList.add('chatBoxTab', 'btn', 'btn-primary');
                    activeTab1.textContent = doctor_name;
                    activeTab1.setAttribute('data-doctor-name', doctor_name);
                    activeTab1.setAttribute('data-doctor-id', doctor_id);
                    chatHeader.appendChild(activeTab1);
                } else {
                    // if there are tabs 
                    // check if this doctor has a tab opened
                    let existTab = null;
                    for (let i = 0; i < chatHeader.childElementCount; i++) {
                        if (chatHeader.children[i].innerText === doctor_name) {
                            existTab = chatHeader.children[i];
                            break;
                        }
                    }
                    if (existTab) {
                        // remove the highlight from the current tab 
                        // make the new tab highlighed
                        activeTab1.classList.remove('btn-primary');
                        activeTab1.classList.add('btn-secondary');
                        activeTab1 = existTab;
                        activeTab1.classList.remove('btn-secondary');
                        activeTab1.classList.add('btn-primary');
                    } else {
                        // if tab doesnt exist
                        const newTab = document.createElement('div');
                        newTab.classList.add('chatBoxTab', 'btn', 'btn-primary');
                        newTab.textContent = doctor_name;
                        newTab.setAttribute('data-doctor-name', doctor_name);
                        newTab.setAttribute('data-doctor-id', doctor_id)
                        chatHeader.appendChild(newTab);

                        //Hightlight the new tab
                        activeTab1.classList.remove('btn-primary');
                        activeTab1.classList.add('btn-secondary');
                        activeTab1 = newTab;
                        activeTab1.classList.add('btn-primary');
                    }
                }
            })

        })
        // Receives A message from Certain Doctor
        socket.addEventListener('message', async (event) => {
            if (chatBox.classList.contains('d-none')) {
                chatBox.classList.remove('d-none');
                chatBox.classList.add('d-block');
            }
            chatDiv.innerHTML = '';
            const data = JSON.parse(event.data);
            const doctor_id = data.sender_id;
            const result = await fetch(`/message?sender=${data.sender_id}&receiver=${data.receiver_id}`);
            const result1 = await result.text();
            const messagesArray = JSON.parse(result1);

            for (const m of messagesArray) {
                if (!(m.message_sender == patient_id)) {
                    chatDiv.innerHTML += `<p class="lead text-end">${data.sender_name}: ${m.message_content}</p>`;
                } else {
                    chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                }
            }

            chatSend.addEventListener('click', () => {
                const message = {
                    type: "message",
                    sender_id: patient_id,
                    sender_name: patient_name,
                    receiver_id: data.sender_id,
                    role: "patient",
                    content: chatInput.value
                }
                if (chatInput.value !== '') {
                    const html = `<p class="lead text-start">You: ${chatInput.value}</p>`;
                    chatDiv.innerHTML += html;
                    socket.send(JSON.stringify(message));
                    chatInput.value = '';
                }

            })
            if (!activeTab1) {
                activeTab1 = document.createElement('div');
                activeTab1.classList.add('chatBoxTab', 'btn', 'btn-primary');
                activeTab1.textContent = data.sender_name;
                activeTab1.setAttribute('data-doctor-id', data.sender_id);
                activeTab1.setAttribute('data-doctor-name', data.sender_name);
                chatHeader.appendChild(activeTab1);
            } else {
                // if there are tabs 
                // check if this patient has a tab opened
                let existTab = null;
                for (let i = 0; i < chatHeader.childElementCount; i++) {
                    if (chatHeader.children[i].innerText === data.sender_name) {
                        existTab = chatHeader.children[i];
                        break;
                    }
                }
                if (existTab) {
                    // remove the highlight from the current tab 
                    // make the new tab highlighed
                    activeTab1.classList.remove('btn-primary');
                    activeTab1.classList.add('btn-secondary');
                    activeTab1 = existTab;
                    activeTab1.classList.remove('btn-secondary');
                    activeTab1.classList.add('btn-primary');
                } else {
                    // if tab doesnt exist
                    const newTab = document.createElement('div');
                    newTab.classList.add('chatBoxTab', 'btn', 'btn-primary');
                    newTab.textContent = data.sender_name;
                    newTab.setAttribute('data-doctor-id', doctor_id)
                    newTab.setAttribute('data-doctor-name', data.sender_name)
                    chatHeader.appendChild(newTab);

                    //Hightlight the new tab
                    activeTab1.classList.remove('btn-primary');
                    activeTab1.classList.add('btn-secondary');
                    activeTab1 = newTab;
                    activeTab1.classList.add('btn-primary');
                }

            }
        }
        );
        // End
        // socket.addEventListener('close', (event) => {
        //     console.log('WebSocket connection closed');
        // });

    </script>
    <script>
        const updateSensorButton = document.querySelector('#updateSensor');
        const addSensorButton = document.querySelector('#addSensor');
        const updateSensorForm = document.querySelector('#sensorUpdate');
        const deleteSensorForm = document.querySelector('#sensorDelete');
        const addSensorForm = document.querySelector('#sensorAdd');
        if (updateSensorButton) {
            updateSensorButton.addEventListener('click', () => {
                updateSensorButton.classList.add('d-none');
                updateSensorForm.classList.remove('d-none');
                deleteSensorForm.classList.add('d-none');
            });
        }
        addSensorButton.addEventListener('click', () => {
            addSensorButton.classList.add('d-none');
            addSensorForm.classList.remove('d-none');
        })
    </script>
    <script>
        const updateAppointmentButtons = document.querySelectorAll('.updateAppointmentButton');
        const appointmentUpdateForm = document.querySelectorAll('.appointmentUpdate');
        const appointmentDeleteForm = document.querySelectorAll('.appointmentDelete');
        const appointmentVisitRoom = document.querySelectorAll('.appointmentVisitRoom');
        const appointmentBody = document.querySelectorAll('.appointmentBody');

        const appointmentBodyArray = Array.from(appointmentBody);
        const appointmentUpdateForms = Array.from(appointmentUpdateForm);
        const appointmentDeleteForms = Array.from(appointmentDeleteForm);
        const appointmentVisitForms = Array.from(appointmentVisitRoom);

        updateAppointmentButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const element = appointmentBodyArray.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment')) 
                const updateForm = appointmentUpdateForms.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment')) 
                const deleteForm = appointmentDeleteForms.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment')) 
                const visitForm = appointmentVisitForms.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment')) 
                element.classList.add('d-none');
                btn.classList.add('d-none');
                updateForm.classList.remove('d-none');
                deleteForm.classList.add('d-none');
                visitForm.classList.add('d-none');
            })
        })
        
    </script>
    <script>
        const addMedicalHistoryButton = document.querySelector('#addMedicalHistory');
        const medicalHistoryForm = document.querySelector('#medicalHistoryForm');
        const medicalHistoryRow = document.querySelector('#medicalHistoryRow');
        const medicalHistoryBox = document.querySelector('#medicalHistoryBox'); 

        addMedicalHistoryButton.addEventListener('click', () => {
            addMedicalHistoryButton.classList.add('d-none');
            medicalHistoryRow.classList.add('d-none');
            medicalHistoryBox.classList.add('d-none');
            treatment_box.classList.add('d-none');
            medicalHistoryForm.classList.remove('d-none');
        })
    </script>

    <script>
         function createPrescription() {
            const div = document.createElement('div');
            div.classList.add('d-flex', 'flex-column', 'gap-2');
            const diagnosisInput = document.createElement('input');
            diagnosisInput.classList.add('form-control');
            diagnosisInput.setAttribute('type', 'text');
            diagnosisInput.setAttribute('name', `diagnosis`);
            diagnosisInput.setAttribute('placeholder', 'Diagnosis');
            const notesInput = document.createElement('input');
            notesInput.classList.add('form-control');
            notesInput.setAttribute('type', 'text');
            notesInput.setAttribute('name', `notes`);
            notesInput.setAttribute('placeholder', 'notes');
            const dateInput = document.createElement('input');
            dateInput.classList.add('form-control');
            dateInput.setAttribute('type', 'datetime-local');
            dateInput.setAttribute('name', `date`);
            const medicationInput = document.createElement('input');
            medicationInput.classList.add('form-control');
            medicationInput.setAttribute('type', 'text');
            medicationInput.setAttribute('name', `medicine`);
            medicationInput.setAttribute('placeholder', 'Medication name');
            const dosageInput = document.createElement('input');
            dosageInput.classList.add('form-control');
            dosageInput.setAttribute('type', 'text');
            dosageInput.setAttribute('name', `dosage`);
            dosageInput.setAttribute('placeholder', 'Medication dosage');
            div.appendChild(diagnosisInput);
            div.appendChild(notesInput);
            div.appendChild(dateInput);
            div.appendChild(medicationInput);
            div.appendChild(dosageInput);
            return div;
        }
        function createScanner() {
            const div = document.createElement('div');
            div.classList.add('d-flex', 'flex-column', 'gap-2');
            const diagnosisInput = document.createElement('input');
            diagnosisInput.classList.add('form-control');
            diagnosisInput.setAttribute('type', 'text');
            diagnosisInput.setAttribute('name', `diagnosis`);
            diagnosisInput.setAttribute('placeholder', 'Diagnosis');
            const notesInput = document.createElement('input');
            notesInput.classList.add('form-control');
            notesInput.setAttribute('type', 'text');
            notesInput.setAttribute('name', `notes`);
            notesInput.setAttribute('placeholder', 'notes');
            const dateInput = document.createElement('input');
            dateInput.classList.add('form-control');
            dateInput.setAttribute('type', 'date');
            dateInput.setAttribute('name', `date`);
            const scannerInput = document.createElement('input');
            scannerInput.classList.add('form-control');
            scannerInput.setAttribute('type', 'file');
            scannerInput.setAttribute('name', `photos`);
            div.appendChild(diagnosisInput);
            div.appendChild(notesInput);
            div.appendChild(dateInput);
            div.appendChild(scannerInput);
            return div;
        }

    </script>

    <script>
        const treatmentType = document.querySelector('#treatmentType');
        const submitMedicalHistoryForm = document.querySelector('#submitMedicalHistoryForm');

        treatmentType.addEventListener('change', () => {
            treatmentType.classList.add('d-none');
            submitMedicalHistoryForm.classList.remove('d-none');
            let element = null;
            if (treatmentType.value == 'prescription') {
                element = createPrescription();
            }else if (treatmentType.value == 'scanner') {
                element = createScanner();
                medicalHistoryForm.setAttribute('enctype', 'multipart/form-data');
            }
            medicalHistoryForm.insertBefore(element, submitMedicalHistoryForm);
        })
    </script>

    <script>
        const treatment_type = document.querySelectorAll('.treatment-type');
        const treatments = document.querySelector('#treatments');
        let activeType = null;
        let activeEle = null;
        treatment_type.forEach( async (e) => {
            e.addEventListener('click', async () => {
                if (activeType) {
                    activeType.classList.remove('btn-primary')
                    activeType.classList.add('btn-light');
                }
                searchResult.innerHTML = '';
                activeType = e;
                activeType.classList.remove('btn-light')
                activeType.classList.add('btn-primary');
                treatment_box.classList.remove('d-none');
                const result = await fetch(`/treatment/${e.innerHTML}`);
                const response = await result.json();
                console.dir(response);
                treatments.innerHTML = '';
                for (const r of response) {
                    if (r.prescription_dosage) {
                        treatments.innerHTML += `<div class="btn btn-light pres">${r.medical_history_diagnosis}</div>`;
                    }else if(!r.image_type) {
                        treatments.innerHTML += `<div class="btn btn-light scanner">${r.medical_history_diagnosis}</div>`;
                    }
                    else if(r.image_type == 'radio') {
                        treatments.innerHTML += `<div class="btn btn-light radio">${r.medical_history_diagnosis}</div>`;
                    }
                    else if(r.image_type == 'analyse') {
                        treatments.innerHTML += `<div class="btn btn-light analyse">${r.medical_history_diagnosis}</div>`;
                    }
                }
                const pres = document.querySelectorAll('.pres');
                    pres.forEach(element => {
                        element.addEventListener('click', () => {
                            if (activeEle) {
                                activeEle.classList.remove('btn-success');
                                activeEle.classList.add('btn-light');
                            }
                            activeEle = element;
                            searchResult.innerHTML = '';
                            activeEle.classList.remove('btn-light');
                            activeEle.classList.add('btn-success');
                            const obj = response.find(e => e.medical_history_diagnosis == activeEle.innerHTML)
                            searchResult.innerHTML += `
                                <div class="card-body rounded border border-2"> 
                                    <p class="lead">${obj.medical_history_notes}</p>
                                    <p class="lead">${obj.prescription_medicine} - ${obj.prescription_dosage}</p>
                                    <button class="btn btn-primary dwnld">Download</button> 
                                    <button class="btn btn-danger text-white cls">Close</button>
                                </div>`;
                            const cls = searchResult.childNodes[1].childNodes[7];
                            const dwnld = searchResult.childNodes[1].childNodes[5];
                            dwnld.addEventListener('click', () => {
                                const doc = new jsPDF();
                                doc.save();
                            })
                            cls.addEventListener('click', () => {
                                searchResult.innerHTML = '';
                                activeEle.classList.remove('btn-success');
                                activeEle.classList.add('btn-light');
                                activeEle = null;
                            })
                        })
                })
                const image = document.querySelectorAll('.scanner') || document.querySelectorAll('.radio') || document.querySelectorAll('.analyse');
                    image.forEach(element => {
                        element.addEventListener('click', () => {
                            if (activeEle) {
                                activeEle.classList.remove('btn-success');
                                activeEle.classList.add('btn-light');
                            }
                            activeEle = element;
                            searchResult.innerHTML = '';
                            activeEle.classList.remove('btn-light');
                            activeEle.classList.add('btn-success');
                            const obj = response.find(e => e.medical_history_diagnosis == activeEle.innerHTML)
                            searchResult.innerHTML += `
                                <div class="card-body rounded border border-2"> 
                                    <p class="lead">${obj.medical_history_notes}</p>
                                    <a href="../../${obj.image_url}.png" target="_blank" class="btn btn-success">Open Image</a>
                                    <a href="../../${obj.image_url}.png" download class="btn btn-primary">Download Image</a>
                                    <button class="btn btn-danger text-white cls">Close</button>
                                </div>`;
                            const cls = searchResult.childNodes[1].childNodes[7];
                            cls.addEventListener('click', () => {
                                searchResult.innerHTML = '';
                                activeEle.classList.remove('btn-success');
                                activeEle.classList.add('btn-light');
                                activeEle = null;
                            })
                        })
                    })
            })
        });
        
    </script>

    <script>
        function navigateToUserPage(person_id) {
            window.location.href = `/users/patient/doctor_full_details/${person_id}`;
        }
    </script>

    <script>
        const riskFactorButton = document.querySelector('#riskFactorButton');
        const riskFactors = document.querySelector('#riskFactors');

        riskFactorButton.addEventListener('click', () => {
            if(riskFactors.classList.contains('d-none')) {
                riskFactors.classList.remove('d-none');
                riskFactors.classList.add('d-block');
                riskFactorButton.classList.remove('grey-background');
                riskFactorButton.classList.add('green-background');
            }else {
                riskFactors.classList.remove('d-block');
                riskFactors.classList.add('d-none');
                riskFactorButton.classList.remove('green-background');
                riskFactorButton.classList.add('grey-background');
            }
        })

    </script>
