<% layout('layouts/doctorBoilerplate') %>

    <div class="row gap-3">
        <div class="col-2 green-background d-flex flex-column gap-3 py-4 vh-100 text-center px-4 overflow-y-scroll" id="column">
            <% for(const d of result.rows){ %>
                <a href="#" class="btn fw-bold white-background-color position-relative profileCards w-100" style="min-height: 2.5rem;">
                    <%= d.person_name %>
                    <div class="d-flex position-absolute white-background-color p-3 gap-1 here infoCard d-none"
                        style="height: 75px; right: -9rem; top: 0;">
    
                        <img src="/pics/profile_card.svg" onclick="navigateToUserPage(<%= d.person_id %>)" class="doctors-profiles">
                        <div class="vh"></div>
                        <img src="/pics/send_message.svg" class="startChat" data-patient-id="<%= d.person_id %>" data-patient-name="<%= d.person_name %>">
                    </div>
                </a>
            <% } %>
        </div>
        <div class="col-6 vh-100 d-flex flex-column gap-2 middle justify-content-center middle" id="middle-section">
            <div class="card p-2">
                <div class="card-body">
                    <h5 class="card-title text-black pb-2">My Appointments</h5>
                    <div class="container appointment-container d-flex gap-2" style="min-height: 400px;">
                        <% for(const [i, a] of myAppointments.entries()){ %>
                            <% const options ={weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric'} %>
                            <% const date = new Date(a.appointment_date).toLocaleDateString(undefined, options); %> 
                            <% const formDate = date.slice(9) %>    
                            <% const test_date = new Date(a.appointment_date); %> 
                            <% const display_date = test_date.toLocaleString('en-US', options); %>
                            <% const year = test_date.getFullYear() %>
                            <% let month = test_date.getMonth() + 1; %>
                            <% if(month<10) month = `0${month}`;%> 
                            <% let day_e = test_date.getDate(); %>
                            <% if(day_e<10) day_e = `0${day_e}`;%>
                            <% let hrs = (test_date.getHours() %12)%>
                            <% if(hrs<10) hrs = `0${hrs}`;%>
                            <% let mns= test_date.getMinutes()%>
                            <% if(mns<10) mns = `0${mns}`;%>
                            <% const tmp = `${year}-${month}-${day_e}T${hrs}:${mns}`; %>
                            <% const orangeBackground = 'orange-background' %>
                            <% const redBackground = 'red-background' %>
                            <% const purpleBackground = 'purple-background' %>
                            <% let backgroundColor = null %>
                            <% if((i%3) == 0) {backgroundColor = redBackground} else if((i%3) == 1) {backgroundColor = purpleBackground} else {backgroundColor = orangeBackground} %>
                            <div class="card text-white <%= backgroundColor %>" style="max-height: 170px;">
                                <div class="card-body" data-appointment="<%= a.appointment_id %>" >
                                    <div class="appointmentBody" data-appointment="<%= a.appointment_id %>">
                                        <h5 class="card-title fs-4"><%= a.person_name %></h5>
                                        <p class="lead fw-bold fs-6"><%= display_date%></p>
                                    </div>
                                    <div class="icons-container d-flex justify-content-between">
                                        <form action="/appointment/<%= a.appointment_id %>?_method=PUT" method="POST"
                                            class="d-none appointmentUpdate" id="appointmentUpdate" data-appointment="<%= a.appointment_id%>">
                                            <div class="mb-3 d-flex flex-column align-items-center gap-2">
                                                <input type="datetime-local" class="form-control" id="name" name="date"
                                                    placeholder="Enter New Date" value="<%= tmp %>">
                                                <button class="bg-transparent border-0 m-auto" ><img src="/pics/update_date.svg" style="height: 40px;"></button>
                                            </div>
                                        </form>
                                        <a class="updateAppointmentButton" data-appointment="<%= a.appointment_id %>"><img src="/pics/update_date.svg" style="height: 40px;"></a>
                                        <form action="/appointment/<%= a.appointment_id %>?_method=DELETE" method="post"
                                            id="appointmentDelete" class="appointmentDelete" data-appointment="<%= a.appointment_id%>">
                                            <button class="bg-transparent border-0"><img src="/pics/delete_icons.svg" style="height: 40px;"></button>
                                        </form>
                                        <form action="/appointment/<%= a.appointment_id %>" data-appointment="<%= a.appointment_id %>" method="get" class="appointmentVisitRoom">
                                            <button class="bg-transparent border-0"><img src="/pics/visit_room.svg" style="height: 40px;"></button>
                                        </form>
                                    </div>
                                    
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-3 d-flex flex-column justify-content-between p-5">
            <div class="align-self-end flex-shrink d-none mt-auto mb-5" id="chatBox">
                <div class="card text-center position-relative">
                    <h4 class="me-5 fw-normal">Chat With doctors</h4>
                    <div class="position-absolute top-0 end-0 d-flex gap-2 p-1">
                        <button class="btn btn-sm ms-5 symbol d-block" id="minimizeButton">&#8722;</button>
                        <button class="btn btn-sm ms-5 symbol d-none" id="boxButton">&#9633;</button>
                        <button class="btn btn-sm symbol" id="closeButton">&#10005;</button>
                    </div>
                    <div class="card-header d-flex gap-1" id="chatBoxHeader">

                    </div>
                    <div class="card-body d-block" id="chatBoxBody">
                        <div class="card-text max-chat-height" id="chatDiv">

                        </div>
                        <div class="d-flex d-block" id="messageFactory">
                            <input id="chatInput" type="text" placeholder="Send a message" class="form-control">
                            <button id="chatSend" class="btn btn-primary ms-2 sendBTN">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = new WebSocket('ws://localhost:8080/chat');

        const chatInput = document.querySelector('#chatInput');
        const patientIds = document.querySelectorAll('.patient-ids');
        const chatHeader = document.querySelector('#chatBoxHeader');
        const chatBody = document.querySelector('#chatBoxBody');
        const messageFactory = document.querySelector('#messageFactory');
        const startChatBtns = document.querySelectorAll('.startChat');
        const sendBTN = document.querySelector('.sendBTN');
        const profileCards = document.querySelectorAll('.profileCards');
        const chatBox = document.querySelector('#chatBox');
        const closeButton = document.querySelector('#closeButton');
        const minimizeButton = document.querySelector('#minimizeButton');
        const boxButton = document.querySelector('#boxButton');
        const middle_section = document.querySelector('#middle-section'); 
        const Column = document.querySelector('#column')
        const doctor_id = "<%= doctorObject.person_id %>";
        const doctor_name = "<%= doctorObject.person_name%>";

        closeButton.addEventListener('click', () => {
            chatBox.classList.remove('d-block');
            chatBox.classList.add('d-none');
        });

        minimizeButton.addEventListener('click', () => {
            chatDiv.classList.add('d-none');
            chatDiv.classList.remove('d-block');
            chatHeader.classList.add('d-none');
            minimizeButton.classList.remove('d-block');
            minimizeButton.classList.add('d-none');
            boxButton.classList.remove('d-none');
            boxButton.classList.remove('d-block');
            messageFactory.classList.add('d-none');
            messageFactory.classList.remove('d-block')
        });

        boxButton.addEventListener('click', () => {
            chatDiv.classList.add('d-block');
            chatDiv.classList.remove('d-none');
            chatHeader.classList.add('d-flex');
            chatHeader.classList.remove('d-none');
            minimizeButton.classList.add('d-block');
            minimizeButton.classList.remove('d-none');
            boxButton.classList.add('d-none');
            boxButton.classList.remove('d-block');
            messageFactory.classList.add('d-block');
            messageFactory.classList.remove('d-none')
        });
        let activeElement = null;
 
        profileCards.forEach((element) => {
            element.addEventListener('click', () => {
                let clickedElement = element.childNodes[1];
                if (!activeElement) {
                    activeElement = clickedElement;
                    activeElement.classList.remove('d-none');
                    activeElement.classList.add('d-block');
                    Column.classList.remove('overflow-y-scroll');
                    middle_section.classList.add('z-1');
                } else {
                    if(activeElement == clickedElement) {
                    clickedElement.classList.remove('d-block');
                    clickedElement.classList.add('d-none');
                    activeElement = null;
                    Column.classList.add('overflow-y-scroll');
                    middle_section.classList.remove('z-1');
                    } else {
                    activeElement.classList.remove('d-block');
                    activeElement.classList.add('d-none');
                    activeElement = clickedElement;
                    activeElement.classList.remove('d-none');
                    activeElement.classList.add('d-block');
                    }
                }
            })
        })


        // Establish a socket between all doctors of this patient
        socket.addEventListener('open', (event) => {
            console.log('WebSocket connection opened');
            for (const p of patientIds) {
                const message = {
                    type: "login",
                    sender_id: doctor_id,
                    receiver_id: p.innerText,
                    role: "doctor"
                }
                socket.send(JSON.stringify(message));
            }
        });
        // Send a message to specific patient
        let activeTab1 = null;

        chatHeader.addEventListener('click', async (e) => {
            const clicked = e.target;
            if (activeTab1 != e.target) {
                activeTab1.classList.remove('btn-primary');
                activeTab1.classList.add('btn-secondary');
                activeTab1 = e.target;
                activeTab1.classList.remove('btn-secondary');
                activeTab1.classList.add('btn-primary');
            }
            if (clicked.classList.contains('chatBoxTab')) {
                chatDiv.innerHTML = '';
                const result = await fetch(`/message?sender=${doctor_id}&receiver=${clicked.getAttribute('data-patient-id')}`);
                const result1 = await result.text();
                const messagesArray = JSON.parse(result1);
                for (const m of messagesArray) {
                    if (m.message_sender == doctor_id) {
                        chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                    }
                    else {
                        chatDiv.innerHTML += `<p class="lead text-end">${m.message_sender}: ${m.message_content}</p>`;
                    }
                }
            }
        })

        startChatBtns.forEach((btn) => {
            btn.addEventListener('click', async () => {
                if (chatBox.classList.contains('d-none')) {
                    chatBox.classList.remove('d-none');
                    chatBox.classList.add('d-block');
                }
                chatDiv.innerHTML = '';
                const patient_id = btn.getAttribute('data-patient-id');
                const patientName = btn.getAttribute('data-patient-name');
                const result = await fetch(`/message?sender=${doctor_id}&receiver=${patient_id}`);
                const result1 = await result.text();
                const messagesArray = JSON.parse(result1);
                for (const m of messagesArray) {
                    if (m.message_sender == doctor_id) {
                        chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                    }
                    else {
                        chatDiv.innerHTML += `<p class="lead text-end">${patientName}: ${m.message_content}</p>`;
                    }
                }
                chatSend.addEventListener('click', () => {
                    const content = chatInput.value;
                    const message = {
                        type: "message",
                        sender_id: "<%= doctorObject.person_id %>",
                        sender_name: "<%= doctorObject.person_name %>",
                        receiver_id: patient_id,
                        role: "doctor",
                        content
                    }
                    if (chatInput.value !== '') {
                        const html = `<p class="lead text-start">You: ${chatInput.value}</p>`;
                        chatDiv.innerHTML += html;
                        socket.send(JSON.stringify(message));
                    }
                    chatInput.value = '';
                })
                // create first tab 
                if (!activeTab1) {
                    chatBox.classList.remove('d-none');
                    activeTab1 = document.createElement('div');
                    activeTab1.classList.add('chatBoxTab', 'btn', 'btn-primary');
                    activeTab1.textContent = patientName;
                    activeTab1.setAttribute('data-patient-name', patientName);
                    activeTab1.setAttribute('data-patient-id', patient_id);
                    chatHeader.appendChild(activeTab1);
                } else {
                    // if there are tabs 
                    // check if this Patient has a tab opened
                    let existTab = null;
                    for (let i = 0; i < chatHeader.childElementCount; i++) {
                        if (chatHeader.children[i].innerText === patientName) {
                            existTab = chatHeader.children[i];
                            break;
                        }
                    }
                    if (existTab) {
                        // remove the highlight from the current tab 
                        // make the new tab highlighed
                        activeTab1.classList.remove('btn-primary');
                        activeTab1.classList.add('btn-secondary');
                        activeTab1 = existTab;
                        activeTab1.classList.remove('btn-secondary');
                        activeTab1.classList.add('btn-primary');
                    } else {
                        // if tab doesnt exist
                        const newTab = document.createElement('div');
                        newTab.classList.add('chatBoxTab', 'btn', 'btn-primary');
                        newTab.textContent = patientName;
                        newTab.setAttribute('data-patient-name', patientName);
                        newTab.setAttribute('data-patient-id', patient_id)
                        chatHeader.appendChild(newTab);

                        //Hightlight the new tab
                        activeTab1.classList.remove('btn-primary');
                        activeTab1.classList.add('btn-secondary');
                        activeTab1 = newTab;
                        activeTab1.classList.add('btn-primary');
                    }
                }
            })

        })
        // Receives A message from Certain patient
        socket.addEventListener('message', async (event) => {
            
            if (chatBox.classList.contains('d-none')) {
                chatBox.classList.remove('d-none');
                chatBox.classList.add('d-block');
            }
            chatDiv.innerHTML = '';
            const data = JSON.parse(event.data);
            const patient_id = data.sender_id;
            const result = await fetch(`/message?sender=${data.sender_id}&receiver=${data.receiver_id}`);
            const result1 = await result.text();
            const messagesArray = JSON.parse(result1);

            for (const m of messagesArray) {
                if (!(m.message_sender == doctor_id)) {
                    chatDiv.innerHTML += `<p class="lead text-end">${data.sender_name}: ${m.message_content}</p>`;
                } else {
                    chatDiv.innerHTML += `<p class="lead text-start">You: ${m.message_content}</p>`;
                }
            }
            // console.dir(patientIds[0].parentElement.childNodes[1].childNodes[1].innerText === data.sender_id)
            sendBTN.addEventListener('click', () => {
                const message = {
                    type: "message",
                    sender_id: doctor_id,
                    sender_name: "<%= doctorObject.person_name %>",
                    receiver_id: data.sender_id,
                    role: "doctor",
                    content: chatInput.value
                }
                if (chatInput.value !== '') {
                    const html = `<p class="lead">You: ${chatInput.value}</p>`;
                    chatDiv.innerHTML += html;
                    socket.send(JSON.stringify(message));
                    chatInput.value = '';
                }
            })
            if (!activeTab1) {
                chatBox.classList.remove('d-none');
                activeTab1 = document.createElement('div');
                activeTab1.classList.add('chatBoxTab', 'btn', 'btn-primary');
                activeTab1.textContent = data.sender_name;
                activeTab1.setAttribute('data-patient-id', data.sender_id);
                activeTab1.setAttribute('data-patient-name', data.sender_name);
                chatHeader.appendChild(activeTab1);
            } else {
                // if there are tabs 
                // check if this patient has a tab opened
                let existTab = null;
                for (let i = 0; i < chatHeader.childElementCount; i++) {
                    if (chatHeader.children[i].innerText === data.sender_name) {
                        existTab = chatHeader.children[i];
                        break;
                    }
                }
                if (existTab) {
                    // remove the highlight from the current tab 
                    // make the new tab highlighed
                    activeTab1.classList.remove('btn-primary');
                    activeTab1.classList.add('btn-secondary');
                    activeTab1 = existTab;
                    activeTab1.classList.remove('btn-secondary');
                    activeTab1.classList.add('btn-primary');
                } else {
                    // if tab doesnt exist
                    const newTab = document.createElement('div');
                    newTab.classList.add('chatBoxTab', 'btn', 'btn-primary');
                    newTab.textContent = data.sender_name;
                    newTab.setAttribute('data-patient-id', data.sender_id)
                    newTab.setAttribute('data-patient-name', data.sender_name)
                    chatHeader.appendChild(newTab);

                    //Hightlight the new tab
                    activeTab1.classList.remove('btn-primary');
                    activeTab1.classList.add('btn-secondary');
                    activeTab1 = newTab;
                    activeTab1.classList.add('btn-primary');
                }

            }
        }
        );


    // End
    // socket.addEventListener('close', (event) => {
    //     console.log('WebSocket connection closed');
    // });

    </script>

    <script>
        const updateAppointmentButton = document.querySelectorAll('.updateAppointmentButton');
        const appointmentUpdateForm = document.querySelectorAll('.appointmentUpdate');
        const appointmentDeleteForm = document.querySelectorAll('.appointmentDelete');
        const appointmentVisitRoom = document.querySelectorAll('.appointmentVisitRoom');
        const appointmentBody = document.querySelectorAll('.appointmentBody');

        const appointmentBodyArray = Array.from(appointmentBody);
        const appointmentUpdateForms = Array.from(appointmentUpdateForm);
        const appointmentDeleteForms = Array.from(appointmentDeleteForm);
        const appointmentVisitForms = Array.from(appointmentVisitRoom);


        updateAppointmentButton.forEach(btn => {
            btn.addEventListener('click', () => {
                const element = appointmentBodyArray.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment')) 
                const updateForm = appointmentUpdateForms.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment')) 
                const deleteForm = appointmentDeleteForms.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment'))
                const visitForm = appointmentVisitForms.find(ele => ele.getAttribute('data-appointment') == btn.getAttribute('data-appointment')) 
                element.classList.add('d-none');
                btn.classList.add('d-none');
                updateForm.classList.remove('d-none');
                deleteForm.classList.add('d-none');
                visitForm.classList.add('d-none');
            })
        })
    </script>
    <script>
        function navigateToUserPage(person_id) {
            window.location.href = `/users/doctor/patient_full_details/${person_id}`;
        }
    </script>